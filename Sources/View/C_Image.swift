////  C_Image.swift//  Essentials////  Created by ARahmanQ on 7/9/24.//import SwiftUI#if os(iOS)import UIKit#elseif os(macOS)import AppKit#endifpublic struct C_Image: View {    #if os(iOS)    let image: Image?#elseif os(macOS)    let image: Image?#endif        let color: Color?    let width: CGFloat?    let height: CGFloat?    let font: Font?        public var body: some View {                if let image {            if let color {                image                    .resizable()                    .foregroundStyle(color)                    .scaledToFit()                    .font(font)                    .frame(width: width, height: height)            } else {                image                    .resizable()                    .scaledToFit()                    .font(font)                    .frame(width: width, height: height)            }        } else if width != nil || height != nil {            Rectangle()                .foregroundStyle(.clear)                .frame(width: width, height: height)        }    }        public init(image: Image?, width: CGFloat? = nil, height: CGFloat? = nil) {        self.image = image        self.width = width        self.height = height        self.color = nil        self.font = nil    }        public init(_ name: Any?,                color: Color? = nil,                font: Font? = nil,                width: CGFloat? = nil,                height: CGFloat? = nil) {                if let nameType = name as? ImageNameConvertible,           let nameValue = nameType.rawValue as? String {            if nameValue.hasPrefix("s_") {                let newName = nameValue.replacingOccurrences(of: "s_", with: "")                self.image = Image(systemName: newName)            } else {                self.image = Image(nameValue)            }        } else {            self.image = nil        }                self.font = font                 self.width = width        self.height = height        self.color = color    }    #if os(iOS)        public init(image: UIImage?,                width: CGFloat? = nil,                height: CGFloat? = nil) {                if let image = image {            self.image = Image(uiImage: image)        } else {            self.image = nil        }                self.width = width        self.height = height                self.font = nil        self.color = nil            }        public init(image: Image?,                colorValues: RGBValues? = nil,                width: CGFloat? = nil,                height: CGFloat? = nil) {                if let image = image {            self.image = image        } else {            self.image = nil        }                self.width = width        self.height = height                self.font = nil                if let colorValues = colorValues {            self.color = RGBValues.getColor(value: colorValues)        } else {            self.color = nil        }    }#elseif os(macOS)    public init(image: NSImage?, width: CGFloat? = nil, height: CGFloat? = nil) {                if let image = image {            self.image = Image(nsImage: image)        } else {            self.image = nil        }                self.width = width        self.height = height        self.color = nil        self.font = nil    }#endif}public enum C_SystemImageName: String {    case chevronUp              = "chevron.up"    case chevronDown            = "chevron.down"    case chevronLeft            = "chevron.left"    case chevronRight           = "chevron.right"        case personIcon             = "person.circle.fill"    case copyIcon               = "square.on.square"        case heart                  = "heart"    case heartFilled            = "heart.fill"        case leftArrow              = "arrow.left"        case s_deleteIcon           = "trash"        case s_paperclip            = "paperclip"    case s_plus                 = "plus"    case s_cross                = "xmark"    case s_cancelImage          = "x.circle.fill"}public struct RGBValues {    let red: CGFloat    let green: CGFloat    let blue: CGFloat        static func getColor(value: RGBValues) -> Color {        Color(red: value.red, green: value.green, blue: value.blue)    }}public extension Image {    static func systemImage(_ symbol: C_SystemImageName) -> Image {        return Image(systemName: symbol.rawValue)    }}public extension Color {    /// Returns the RGBA components (0...1 range) of a Color if available    static func getValues(for color: UIColor) -> RGBValues? {#if os(iOS)        let uiColor = color        var red: CGFloat = 0        var green: CGFloat = 0        var blue: CGFloat = 0        var alpha: CGFloat = 0        guard uiColor.getRed(&red, green: &green, blue: &blue, alpha: &alpha) else {            return nil        }        return RGBValues(red: red, green: green, blue: blue)        #elseif os(macOS)        let nsColor = NSColor(self)        guard let converted = nsColor.usingColorSpace(.deviceRGB) else { return nil }        return (converted.redComponent, converted.greenComponent, converted.blueComponent, converted.alphaComponent)#endif    }}